@page "/my-letters"
@inject ILetterService LetterService
@inject IAccountManagement AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>BrevProffsen</PageTitle>
<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="d-flex justify-content-end">
                <Button Type="@ButtonType.Button"
                        OnClick="OnGoToGenerator">
                    Tillbaka
                </Button>
            </div>
            <hr />
            <div class="row">
                <div class="col mb-3">
                    <ul class="list-group">
                        <Virtualize Context="letter" Items="Letters">
                            <li class="list-group-item @(letter == _selectedLetter ? "list-group-item-primary" : "")"
                                @onclick="() => OnLetterSelected(letter)">
                                @letter.Title
                            </li>
                        </Virtualize>
                    </ul>
                </div>
                <div class="col mb-3">
                    <BootStrapTextArea
                        Rows="12"
                        BindValue="@_selectedLetter.Text"
                        BindValueChanged="OnLetterContentChanged"/>
                </div>
            </div>
            <div class="row">
                <Button OnClick="OnSave">Spara ändringar</Button>
            </div>
        </div>
        
        

    </Authorized>
    <NotAuthorized>
        404 not found
    </NotAuthorized>
</AuthorizeView>

@code {

    public List<LetterModel> Letters { get; set; } = new();
    private string UserEmail { get; set; } = string.Empty;
    private LetterModel _selectedLetter = new();
    private string _additionalListClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var isAuth = await AuthenticationStateProvider.CheckAuthenticatedAsync();

        if (isAuth)
        {
            UserEmail = await AuthenticationStateProvider.GetUserEmailAsync();

            var letters = await LetterService.GetAllByUserEmailAsync(UserEmail);
            Letters.AddRange(letters);
        }
        else
        {
            NavigationManager.NavigateTo("./");
        }

    }

    private void OnLetterSelected(LetterModel letter)
    {
        _selectedLetter = letter;
    }


    private async Task OnGoToGenerator()
    {
        NavigationManager.NavigateTo("./create-letter");
    }

    private async Task OnLetterContentChanged(string newValue)
    {
        _selectedLetter.Text = newValue;
    }

    private async Task OnSave()
    {
        await LetterService.UpdateAsync(_selectedLetter.Id, _selectedLetter);
    }
    
}