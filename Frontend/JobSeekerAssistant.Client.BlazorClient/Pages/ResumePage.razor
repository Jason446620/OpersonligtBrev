@page "/my-resume"
@inject IResumeService ResumeService
@inject IAccountManagement AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>BrevProffsen</PageTitle>


<AuthorizeView>
    <Authorized>
        <div class="container">
            <InputTextFloating Id="resume-name"
                               Placeholder="Ditt namn"
                               BindValue="@Resume.Name"
                               BindValueChanged="@OnResumeNameChanged"
                               AdditionalClasses="mb-3" />

            <BootStrapTextArea Id="about-me"
                               Placeholder="Beskriv dig själv kortfattat..."
                               Rows="4"
                               BindValue="@Resume.AboutMe"
                               BindValueChanged="OnAboutMeChanged"
                               AdditionalClasses="mb-3"></BootStrapTextArea>




            <ListCreater PlaceHolder="Språk"
                         ListItems="@Resume.Languages"
                         ListItemChanged="OnLanguagesChanged"
                         Id="lang"></ListCreater>
            <ListCreater PlaceHolder="Färdigheter"
                         ListItems="@Resume.Skills"
                         ListItemChanged="OnSkillsChanged"
                         Id="skill"></ListCreater>

            <WorkItemForm WorkItems="@Resume.WorkItems" 
                          ListItemChanged="@OnWorkItemsChanged"/>

            <EducationItemForm EducationItems="@Resume.EducationItems"
                               ListItemChanged="@OnEducationItemsChanged"/>

            <Button Color="@Colors.Green" 
                    Type="@ButtonType.Button"
                    OnClick="@OnSaveResume">Spara</Button>
        </div>
    </Authorized>
    <NotAuthorized>
        404 not found
    </NotAuthorized>
</AuthorizeView>



@code {
    private ResumeModel Resume = new();
    private string UserEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
       await base.OnInitializedAsync();

       var isAuth = await AuthenticationStateProvider.CheckAuthenticatedAsync();

       if (isAuth)
       {
           UserEmail = await AuthenticationStateProvider.GetUserEmailAsync();

           var resumes = await ResumeService.GetAllByUserEmailAsync(UserEmail);

           if(resumes.Any())
               Resume = resumes.First();
       }
       else
       {
           NavigationManager.NavigateTo("./");
       }

       
    }


    private async Task OnSaveResume()
    {
        if (string.IsNullOrWhiteSpace(Resume.UserEmail))
        {
            Resume.UserEmail = UserEmail;

           

            await ResumeService.PostAsync(Resume);
            
        }
        else
        {
            await ResumeService.UpdateAsync(Resume.Id, Resume);
        }
    }

    private void OnAboutMeChanged(string newValue)
    {
        Resume.AboutMe = newValue;
    }

    private void OnResumeNameChanged(string newValue)
    {
        Resume.Name = newValue;
    }

    private void OnLanguagesChanged(List<string> updatedLanguages)
    {
        Resume.Languages = updatedLanguages;
    }

    private void OnSkillsChanged(List<string> updatedSkills)
    {
        Resume.Skills = updatedSkills;
    }

    private void OnWorkItemsChanged(List<ResumeWorkItem> updatedWorkItem)
    {
        Resume.WorkItems = updatedWorkItem;
    }

    private void OnEducationItemsChanged(List<ResumeEducationItem> updatedEducationItems)
    {
        Resume.EducationItems = updatedEducationItems;
    }
}