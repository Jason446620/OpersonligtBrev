@page "/create-letter"
@inject IResumeService ResumeService
@inject ILetterService LetterService
@inject IAccountManagement AuthenticationStateProvider
@inject NavigationManager NavigationManager
<PageTitle>OPersonligtBrev</PageTitle>


<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="d-flex justify-content-end">
                <Button Type="@ButtonType.Button"
                        OnClick="OnGoToLetters">
                    Mina brev
                </Button>
            </div>
            <hr />
            <InputTextFloating Id="company-name"
                               Placeholder="Företagets namn"
                               AdditionalClasses="mb-3"
                               BindValue="@PromptRequestDto.JobDto.CompanyName"
                               BindValueChanged="OnCompanyNameChanged" />
            <BootStrapTextArea Id="about-company"
                               Placeholder="Klistra in företagets 'om oss' text här"
                               AdditionalClasses="mb-3"
                               BindValue="@PromptRequestDto.JobDto.About"
                               BindValueChanged="OnAboutChanged" />
            <BootStrapTextArea Id="work-description"
                               Placeholder="Klistra in annonens arbetsbeskrivning här"
                               AdditionalClasses="mb-3"
                               BindValue="@PromptRequestDto.JobDto.JobDescription"
                               BindValueChanged="OnDescriptionChanged" />
            <InputTextFloating Id="language"
                               Placeholder="Språk"
                               AdditionalClasses="mb-3"
                               BindValue="@PromptRequestDto.Language"
                               BindValueChanged="OnLanguageChanged" />
            <Button Color="Colors.Blue"
                    Type="@ButtonType.Button"
                    AdditionalClasses="mb-3"
                    OnClick="OnGenerate">
                Generera personligt brev!
            </Button>

            <BootStrapTextArea Id="letter"
                               Placeholder="Ditt personliga brev kommer synas här"
                               Rows="10"
                               AdditionalClasses="mb-3"
                               BindValue="@Letter.Text"
                               BindValueChanged="OnLetterChanged" />
            <Button Color="Colors.Green"
                    Type="@ButtonType.Button"
                    AdditionalClasses="mb-3"
                    OnClick="OnSave">
                Spara ändringar
            </Button>
        </div>
    </Authorized>
    <NotAuthorized>
        404 not found
    </NotAuthorized>
</AuthorizeView>

@code {
    public PromptRequestDto PromptRequestDto { get; set; } = new();
    private string UserEmail { get; set; }
    private string ResumeId { get; set; }
    private LetterModel Letter { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var isAuth = await AuthenticationStateProvider.CheckAuthenticatedAsync();

        if (isAuth)
        {
            UserEmail = await AuthenticationStateProvider.GetUserEmailAsync();

            var resumes = await ResumeService.GetAllByUserEmailAsync(UserEmail);

            if (resumes.Any())
                ResumeId = resumes.First().Id;
        }
        else
        {
            NavigationManager.NavigateTo("./");
        }

        
        

    }

    private async Task OnGoToLetters()
    {
        NavigationManager.NavigateTo("./my-letters");
    }

    private async Task OnGenerate()
    {
        var letter = await LetterService.GenerateLetterAsync(ResumeId, PromptRequestDto);

        

        if (letter is not null)
        {
            Letter = letter;
            letter.UserEmail = UserEmail;
            letter.Title = $"{PromptRequestDto.JobDto.CompanyName} - {DateTime.UtcNow.ToShortDateString()}";
            await LetterService.UpdateAsync(Letter.Id, Letter);

        }
    }

    private async Task OnSave()
    {
        await LetterService.UpdateAsync(Letter.Id, Letter);
    }

    private void OnCompanyNameChanged(string newValue)
    {
        PromptRequestDto.JobDto.CompanyName = newValue;
    }
    private void OnAboutChanged(string newValue)
    {
        PromptRequestDto.JobDto.About = newValue;
    }
    private void OnDescriptionChanged(string newValue)
    {
        PromptRequestDto.JobDto.JobDescription = newValue;
    }
    private void OnLanguageChanged(string newValue)
    {
        PromptRequestDto.Language = newValue;
    }
    private void OnLetterChanged(string newValue)
    {
        Letter.Text = newValue;
    }
}