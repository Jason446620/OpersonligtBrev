
@inject IAccountManagement AccountManagement

<div class="card p-3 mb-3">
    <EditForm Model="LoginDto" OnValidSubmit="@DoLoginAsync">
        <InputTextFloating Id="email"
                           Placeholder="Användarnamn" 
                           Type="InputType.Email" 
                           AdditionalClasses="mb-3" 
                           BindValue="@LoginDto.Username" 
                           BindValueChanged="@OnEmailInputChanged" />

        <InputTextFloating Id="password" 
                           Placeholder="Lösenord" 
                           Type="InputType.Password"
                           AdditionalClasses="mb-3" 
                           BindValue="@LoginDto.Password" 
                           BindValueChanged="@OnPasswordInputChanged"/>
        <Button Type="@ButtonType.Submit" 
                Color="Colors.Blue"
                AdditionalClasses="mb-3"
        >Logga in</Button>
        @if (errors)
        {
            @foreach (var error in errorList)
            {
                <div class="alert alert-danger mb-3">@error</div>
            }
        }
    </EditForm>
</div>


@code {
    public LoginDto LoginDto { get; set; } = new();

    
    private bool success, errors;
    private string[] errorList = [];

    public async Task DoLoginAsync()
    {
        success = errors = false;
        errorList = [];

        if (string.IsNullOrWhiteSpace(LoginDto.Username))
        {
            errors = true;
            errorList = ["För att logga in behöver du ange ditt användarnamn."];

            return;
        }

        if (string.IsNullOrWhiteSpace(LoginDto.Password))
        {
            errors = true;
            errorList = ["För att logga in behöver du ange ditt lösenord."];

            return;
        }

        var result = await AccountManagement.LoginAsync(LoginDto.Username, LoginDto.Password);

        if (result.Succeeded)
        {
            success = true;
            LoginDto.Username = LoginDto.Password = string.Empty;
        }
        else
        {
            errors = true;
            errorList = result.ErrorList;
        }
    }

    private async Task OnEmailInputChanged(string newValue)
    {
        LoginDto.Username = newValue;
    }


    private async Task OnPasswordInputChanged(string newValue)
    {
        LoginDto.Password = newValue;
    }

}